{"name":"Velodrome","tagline":"onActivityResult handlers for Android","body":"One of the more horrible pieces of the Android lifecycle occurs inside `onActivityResult`. It inevitably descends into a mess of switch statements and spaghetti.\r\n\r\n```java\r\n\r\n// This is bad!\r\n\r\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (resultCode != Activity.RESULT_OK) {\r\n        return;\r\n    }\r\n    switch (requestCode) {\r\n        case EDIT_TEXT:\r\n            Log.d(TAG, \"EditText dialog returned \" + data.getStringExtra(\"value\"));\r\n            break;\r\n        case DRILL_ACTIVITY:\r\n            Log.d(TAG, \"Some drilldown Activity returned\" + data.getParcelableExtra(\"object\"));\r\n            break;\r\n        case DELETE_RESULT:\r\n            Log.d(TAG, \"Deletion successful\");\r\n            break;\r\n        case RETICULATING_SPLINES:\r\n            Log.d(TAG, \"Splines reticulated\");\r\n            break;\r\n        default:\r\n            Log.d(TAG, \"Dunno\");\r\n    }\r\n}\r\n```\r\n\r\nA more reasonable approach is to encapsulate each piece of callback behavior into its own handler method. That is precisely what Velodrome does.\r\n\r\n```java\r\n// In your fragment or activity class.\r\n\r\n@OnActivityResult(0)\r\npublic void onActivityReturn(Intent data) {\r\n    Log.d(\"Velo\", data.getStringExtra(\"text\"));\r\n}\r\n\r\n// Velodrome can also extract simple values from the Intent\r\n// using the @Arg annotation.\r\n@OnActivityResult(1)\r\npublic void onActivityReturn(@Arg(\"text\") String text, @Arg(\"someNum\") int num) {\r\n    Log.d(\"Velo\", \"Text: \" + text + \" Num: \" + someNum);\r\n}\r\n\r\n@OnActivityResult({2, 3})\r\npublic void onMultipleCodes(Intent data) {\r\n    Log.d(\"Velo\", \"one of two possible things just happened.\");\r\n}\r\n\r\n@OnActivityResult(value = 4, resultCode = Activity.RESULT_CANCELED)\r\npublic void onDialogCancel(Intent data) {\r\n    Log.d(\"Velo\", \"Canceled\");\r\n}\r\n\r\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    Velodrome.handleResult(this, requestCode, resultCode, data);\r\n}\r\n```\r\n\r\n# Performance\r\nVelodrome uses reflection to resolve handler methods. This means it isn't blazing fast.\r\nThat being said, we don't believe that the performance hit is substantial enough to warrant\r\nthe pain of dealing with annotation processing.\r\n\r\nHowever, we wouldn't be sad if some intrepid soul were to submit a [pull request](https://github.com/Levelmoney/velodrome/pulls)!\r\n\r\n#Install\r\n```gradle\r\ndependencies {\r\n    compile 'com.levelmoney.velodrome:velodrome:0.9.1-SNAPSHOT@aar'\r\n}\r\n```\r\n\r\n#License\r\n```\r\nCopyright 2015 Level Money, Inc.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}